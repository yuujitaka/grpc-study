/**
 * @fileoverview gRPC-Web generated client stub for
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.24.3
// source: src/proto/chat.proto

/* eslint-disable */
// @ts-nocheck

import * as grpcWeb from 'grpc-web';

import * as src_proto_chat_pb from '../../src/proto/chat_pb';

export class ChatServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string };
  options_: null | { [index: string]: any };

  constructor(
    hostname: string,
    credentials?: null | { [index: string]: string },
    options?: null | { [index: string]: any }
  ) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorjoin = new grpcWeb.MethodDescriptor(
    '/ChatService/join',
    grpcWeb.MethodType.UNARY,
    src_proto_chat_pb.User,
    src_proto_chat_pb.JoinResponse,
    (request: src_proto_chat_pb.User) => {
      return request.serializeBinary();
    },
    src_proto_chat_pb.JoinResponse.deserializeBinary
  );

  join(
    request: src_proto_chat_pb.User,
    metadata: grpcWeb.Metadata | null
  ): Promise<src_proto_chat_pb.JoinResponse>;

  join(
    request: src_proto_chat_pb.User,
    metadata: grpcWeb.Metadata | null,
    callback: (
      err: grpcWeb.RpcError,
      response: src_proto_chat_pb.JoinResponse
    ) => void
  ): grpcWeb.ClientReadableStream<src_proto_chat_pb.JoinResponse>;

  join(
    request: src_proto_chat_pb.User,
    metadata: grpcWeb.Metadata | null,
    callback?: (
      err: grpcWeb.RpcError,
      response: src_proto_chat_pb.JoinResponse
    ) => void
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + '/ChatService/join',
        request,
        metadata || {},
        this.methodDescriptorjoin,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + '/ChatService/join',
      request,
      metadata || {},
      this.methodDescriptorjoin
    );
  }

  methodDescriptorsendMsg = new grpcWeb.MethodDescriptor(
    '/ChatService/sendMsg',
    grpcWeb.MethodType.UNARY,
    src_proto_chat_pb.ChatMessage,
    src_proto_chat_pb.Empty,
    (request: src_proto_chat_pb.ChatMessage) => {
      return request.serializeBinary();
    },
    src_proto_chat_pb.Empty.deserializeBinary
  );

  sendMsg(
    request: src_proto_chat_pb.ChatMessage,
    metadata: grpcWeb.Metadata | null
  ): Promise<src_proto_chat_pb.Empty>;

  sendMsg(
    request: src_proto_chat_pb.ChatMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: src_proto_chat_pb.Empty) => void
  ): grpcWeb.ClientReadableStream<src_proto_chat_pb.Empty>;

  sendMsg(
    request: src_proto_chat_pb.ChatMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (
      err: grpcWeb.RpcError,
      response: src_proto_chat_pb.Empty
    ) => void
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + '/ChatService/sendMsg',
        request,
        metadata || {},
        this.methodDescriptorsendMsg,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + '/ChatService/sendMsg',
      request,
      metadata || {},
      this.methodDescriptorsendMsg
    );
  }

  methodDescriptorreceiveMsg = new grpcWeb.MethodDescriptor(
    '/ChatService/receiveMsg',
    grpcWeb.MethodType.SERVER_STREAMING,
    src_proto_chat_pb.Empty,
    src_proto_chat_pb.ChatMessage,
    (request: src_proto_chat_pb.Empty) => {
      return request.serializeBinary();
    },
    src_proto_chat_pb.ChatMessage.deserializeBinary
  );

  receiveMsg(
    request: src_proto_chat_pb.Empty,
    metadata?: grpcWeb.Metadata
  ): grpcWeb.ClientReadableStream<src_proto_chat_pb.ChatMessage> {
    return this.client_.serverStreaming(
      this.hostname_ + '/ChatService/receiveMsg',
      request,
      metadata || {},
      this.methodDescriptorreceiveMsg
    );
  }

  methodDescriptorgetAllUsers = new grpcWeb.MethodDescriptor(
    '/ChatService/getAllUsers',
    grpcWeb.MethodType.UNARY,
    src_proto_chat_pb.Empty,
    src_proto_chat_pb.UserList,
    (request: src_proto_chat_pb.Empty) => {
      return request.serializeBinary();
    },
    src_proto_chat_pb.UserList.deserializeBinary
  );

  getAllUsers(
    request: src_proto_chat_pb.Empty,
    metadata: grpcWeb.Metadata | null
  ): Promise<src_proto_chat_pb.UserList>;

  getAllUsers(
    request: src_proto_chat_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (
      err: grpcWeb.RpcError,
      response: src_proto_chat_pb.UserList
    ) => void
  ): grpcWeb.ClientReadableStream<src_proto_chat_pb.UserList>;

  getAllUsers(
    request: src_proto_chat_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (
      err: grpcWeb.RpcError,
      response: src_proto_chat_pb.UserList
    ) => void
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + '/ChatService/getAllUsers',
        request,
        metadata || {},
        this.methodDescriptorgetAllUsers,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + '/ChatService/getAllUsers',
      request,
      metadata || {},
      this.methodDescriptorgetAllUsers
    );
  }
}
